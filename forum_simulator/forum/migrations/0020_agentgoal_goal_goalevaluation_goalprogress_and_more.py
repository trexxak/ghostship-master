# Generated by Django 4.2.25 on 2025-10-08 03:21

from django.db import migrations, models
import django.db.models.deletion

from django.utils import timezone


class Migration(migrations.Migration):

    dependencies = [
        ('forum', '0019_progressevaluation_achievement_emoji_and_more'),
    ]

    def _migrate_catalog(apps, schema_editor):
        Achievement = apps.get_model('forum', 'Achievement')
        Mission = apps.get_model('forum', 'Mission')
        AgentAchievement = apps.get_model('forum', 'AgentAchievement')
        MissionProgress = apps.get_model('forum', 'MissionProgress')
        ProgressEvaluation = apps.get_model('forum', 'ProgressEvaluation')

        Goal = apps.get_model('forum', 'Goal')
        AgentGoal = apps.get_model('forum', 'AgentGoal')
        GoalProgress = apps.get_model('forum', 'GoalProgress')
        GoalEvaluation = apps.get_model('forum', 'GoalEvaluation')

        now = timezone.now()

        mission_map = {}
        for mission in Mission.objects.all():
            goal, created = Goal.objects.get_or_create(
                slug=mission.slug,
                defaults={
                    "name": mission.title,
                    "description": mission.description,
                    "goal_type": "mission",
                    "category": mission.category,
                    "emoji": mission.metadata.get("emoji") if mission.metadata else "",
                    "icon_slug": mission.metadata.get("icon_slug") if mission.metadata else "",
                    "priority": mission.position,
                    "status": mission.status,
                    "is_global": True,
                    "target": mission.target,
                    "progress_current": mission.progress,
                    "telemetry_rules": mission.metadata.get("telemetry_rules") if mission.metadata else {},
                    "metadata": mission.metadata or {},
                    "created_at": mission.created_at,
                    "updated_at": mission.updated_at,
                },
            )
            if not created:
                goal.name = mission.title
                goal.description = mission.description
                goal.category = mission.category
                goal.priority = mission.position
                goal.status = mission.status
                goal.is_global = True
                goal.target = mission.target
                goal.progress_current = mission.progress
                goal.telemetry_rules = mission.metadata.get("telemetry_rules") if mission.metadata else {}
                goal.metadata = mission.metadata or {}
                goal.updated_at = now
                goal.save(update_fields=["name", "description", "category", "priority", "status", "is_global", "target", "progress_current", "telemetry_rules", "metadata", "updated_at"])
            mission_map[mission.id] = goal

        for achievement in Achievement.objects.all():
            goal_type = "progress" if achievement.progression_order is not None else "badge"
            priority = achievement.progression_order if achievement.progression_order is not None else 100
            goal, created = Goal.objects.get_or_create(
                slug=achievement.slug,
                defaults={
                    "name": achievement.name,
                    "description": achievement.description,
                    "goal_type": goal_type,
                    "category": achievement.category,
                    "emoji": achievement.emoji,
                    "icon_slug": achievement.icon_slug,
                    "priority": priority,
                    "status": Goal.STATUS_ACTIVE,
                    "is_global": False,
                    "target": 1.0,
                    "progress_current": 0.0,
                    "telemetry_rules": achievement.telemetry_rules or {},
                    "metadata": {},
                    "created_at": achievement.created_at,
                    "updated_at": achievement.updated_at,
                },
            )
            if not created:
                goal.name = achievement.name
                goal.description = achievement.description
                goal.goal_type = goal_type
                goal.category = achievement.category
                goal.emoji = achievement.emoji
                goal.icon_slug = achievement.icon_slug
                goal.priority = priority
                goal.telemetry_rules = achievement.telemetry_rules or {}
                goal.metadata = {}
                goal.updated_at = now
                goal.save(update_fields=["name", "description", "goal_type", "category", "emoji", "icon_slug", "priority", "telemetry_rules", "metadata", "updated_at"])

        for event in MissionProgress.objects.all():
            goal = mission_map.get(event.mission_id)
            if not goal:
                continue
            GoalProgress.objects.create(
                goal=goal,
                agent_id=event.agent_id,
                tick_number=event.tick_number,
                delta=event.delta,
                note=event.note,
                created_at=event.created_at,
            )

        source_map = {
            "system": "system",
            "mission": "goal",
            "referee": "referee",
            "manual": "manual",
        }
        for record in AgentAchievement.objects.all():
            goal = Goal.objects.filter(slug=record.achievement.slug).first()
            if not goal:
                continue
            AgentGoal.objects.update_or_create(
                agent_id=record.agent_id,
                goal=goal,
                defaults={
                    "progress": record.progress,
                    "unlocked_at": record.unlocked_at,
                    "metadata": record.metadata or {},
                    "source_post_id": record.source_post_id,
                    "awarded_by": source_map.get(record.awarded_by, "system"),
                    "referee_trace_id": record.referee_trace_id or "",
                    "rationale": record.referee_rationale or "",
                },
            )

        for evaluation in ProgressEvaluation.objects.all():
            GoalEvaluation.objects.update_or_create(
                batch_label=evaluation.batch_label,
                defaults={
                    "tick_numbers": evaluation.tick_numbers,
                    "alias": evaluation.alias,
                    "model_name": evaluation.model_name,
                    "status": evaluation.status,
                    "duration_ms": evaluation.duration_ms,
                    "request_payload": evaluation.request_payload,
                    "response_payload": evaluation.response_payload,
                    "error_message": evaluation.error_message,
                    "created_at": evaluation.created_at,
                    "completed_at": evaluation.completed_at,
                },
            )

    def _reverse_migration(apps, schema_editor):
        # No reverse migration; old models are removed.
        pass

    operations = [
        migrations.CreateModel(
            name='Goal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(max_length=220, unique=True)),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('goal_type', models.CharField(choices=[('progress', 'progress'), ('mission', 'mission'), ('badge', 'badge')], default='badge', max_length=16)),
                ('category', models.CharField(blank=True, default='general', max_length=64)),
                ('emoji', models.CharField(blank=True, max_length=16)),
                ('icon_slug', models.CharField(blank=True, max_length=150)),
                ('priority', models.IntegerField(db_index=True, default=100)),
                ('status', models.CharField(choices=[('backlog', 'backlog'), ('active', 'active'), ('completed', 'completed')], default='active', max_length=16)),
                ('is_global', models.BooleanField(default=False)),
                ('target', models.FloatField(default=1.0)),
                ('progress_current', models.FloatField(default=0.0)),
                ('telemetry_rules', models.JSONField(blank=True, default=dict)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['priority', 'name'],
            },
        ),
        migrations.CreateModel(
            name='GoalEvaluation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('batch_label', models.CharField(max_length=64, unique=True)),
                ('tick_numbers', models.JSONField(blank=True, default=list)),
                ('alias', models.CharField(default='progress-eval', max_length=64)),
                ('model_name', models.CharField(blank=True, max_length=120)),
                ('status', models.CharField(choices=[('pending', 'pending'), ('completed', 'completed'), ('failed', 'failed')], default='pending', max_length=16)),
                ('duration_ms', models.PositiveIntegerField(default=0)),
                ('request_payload', models.JSONField(blank=True, default=dict)),
                ('response_payload', models.JSONField(blank=True, default=dict)),
                ('error_message', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='GoalProgress',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tick_number', models.PositiveIntegerField(blank=True, null=True)),
                ('delta', models.FloatField(default=0.0)),
                ('note', models.CharField(blank=True, max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('agent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='goal_progress', to='forum.agent')),
                ('goal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='progress_entries', to='forum.goal')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AgentGoal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('progress', models.FloatField(default=0.0)),
                ('unlocked_at', models.DateTimeField(blank=True, null=True)),
                ('metadata', models.JSONField(blank=True, default=dict)),
                ('awarded_by', models.CharField(choices=[('system', 'system'), ('goal', 'goal_engine'), ('referee', 'progress_referee'), ('manual', 'manual')], default='system', max_length=20)),
                ('referee_trace_id', models.CharField(blank=True, max_length=64)),
                ('rationale', models.TextField(blank=True)),
                ('agent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='goal_states', to='forum.agent')),
                ('goal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='agent_states', to='forum.goal')),
                ('source_post', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='goal_unlocks', to='forum.post')),
            ],
            options={
                'ordering': ['-unlocked_at', 'agent_id'],
            },
        ),
        migrations.AddIndex(
            model_name='goal',
            index=models.Index(fields=['goal_type', 'priority'], name='forum_goal_goal_ty_acaf8d_idx'),
        ),
        migrations.AddIndex(
            model_name='goal',
            index=models.Index(fields=['status', 'goal_type'], name='forum_goal_status_52c7d5_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='agentgoal',
            unique_together={('agent', 'goal')},
        ),
        migrations.RunPython(_migrate_catalog, _reverse_migration),
        migrations.DeleteModel(
            name='AgentAchievement',
        ),
        migrations.DeleteModel(
            name='MissionProgress',
        ),
        migrations.DeleteModel(
            name='Mission',
        ),
        migrations.DeleteModel(
            name='Achievement',
        ),
        migrations.DeleteModel(
            name='ProgressEvaluation',
        ),
    ]
